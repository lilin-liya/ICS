<!DOCTYPE html>
<!-- saved from url=(0053)http://lifeofzjs.com/blog/2014/02/16/csapp-cache-lab/ -->
<html class=" js video" lang="en"><!--<![endif]--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <title>CSAPP: Cache Lab - zyearn's blog</title>
  <meta name="author" content="zyearn">

  
  <meta name="description" content="这个实验分为PART A和PART B。PART A要求我们写一个cache模拟器，PART B要求我们利用cache来优化一个矩阵的转置以达到cache miss最少。 目前只完成了A部分，B部分等把CSAPP的其它实验全部做完了有空的话再回来做，剩下的几个lab也都很有意思。 …">
  

  <!-- http://t.co/dKP3o1e -->
  <meta name="HandheldFriendly" content="True">
  <meta name="MobileOptimized" content="320">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  
  <link rel="canonical" href="http://zyearn.github.io/blog/2014/02/16/csapp-cache-lab">
  <link href="http://lifeofzjs.com/favicon.png" rel="icon">
  <link href="./CSAPP  Cache Lab - zyearn's blog_files/screen.css" media="screen, projection" rel="stylesheet" type="text/css">
  <link href="http://lifeofzjs.com/atom.xml" rel="alternate" title="zyearn&#39;s blog" type="application/atom+xml">
  <!--
  <script src="/javascripts/modernizr-2.0.js"></script>
  <script src="/javascripts/octopress.js" type="text/javascript"></script>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
  <script src="http://lib.sinaapp.com/js/jquery/1.9.1/jquery-1.9.1.min.js"></script>
  <script>!window.jQuery && document.write(unescape('%3Cscript src="./javascripts/lib/jquery.min.js"%3E%3C/script%3E'))</script>
  -->
  <!--
<link href='/stylesheets/google-fonts.css' rel='stylesheet' type='text/css'>
<style type='text/css'>
@font-face {
  font-family: 'Frijole';
  font-style: normal;
  font-weight: 400;
  src: local('Frijole'), url(/stylesheets/Frijole-Regular.ttf) format('truetype');
}
@font-face {
  font-family: 'Open Sans';
  font-style: normal;
  font-weight: 400;
  src: local('Open Sans'), local('OpenSans'), url(/stylesheets/OpenSans-Regular.ttf) format('truetype');
}
</style>
-->

  

<script type="text/javascript" async="" src="./CSAPP  Cache Lab - zyearn's blog_files/embed.js" charset="UTF-8"></script><link type="text/css" rel="stylesheet" href="./CSAPP  Cache Lab - zyearn's blog_files/embed.default.css"><style id="style-1-cropbar-clipper">/* Copyright 2014 Evernote Corporation. All rights reserved. */
.en-markup-crop-options {
    top: 18px !important;
    left: 50% !important;
    margin-left: -100px !important;
    width: 200px !important;
    border: 2px rgba(255,255,255,.38) solid !important;
    border-radius: 4px !important;
}

.en-markup-crop-options div div:first-of-type {
    margin-left: 0px !important;
}
</style></head>

<body>
  <header role="banner"><hgroup>
  <h1><a href="http://lifeofzjs.com/">zyearn's blog</a></h1>
  
</hgroup>

</header>
  <nav role="navigation"><ul class="subscription" data-subscription="rss">
  <li><a href="http://lifeofzjs.com/atom.xml" rel="subscribe-rss" title="subscribe via RSS">RSS</a></li>
  
</ul>
  
<form action="http://google.com.hk/search" method="get">
  <fieldset role="search">
    <input type="hidden" name="q" value="site:zyearn.github.io">
    <input class="search" type="text" name="q" results="0" placeholder="Search">
  </fieldset>
</form>
  
<ul class="main-navigation">
  <li><a href="http://lifeofzjs.com/">Blog</a></li>
  <li><a href="http://lifeofzjs.com/blog/archives">Archives</a></li>
  <li><a href="http://wiki.lifeofzjs.com/" target="_blank">Wiki</a></li>
  <li><a href="http://lifeofzjs.com/about">About Me</a></li>
</ul>

</nav>
  <div id="main">
    <div id="content">
      <div>
<article class="hentry" role="article">
  
  <header>
    
      <h1 class="entry-title">CSAPP: Cache Lab</h1>
    
    
      <p class="meta">
        








  


<time datetime="2014-02-16T11:52:00+08:00" pubdate="" data-updated="true">Feb 16<span>th</span>, 2014</time>
         
         | <a href="http://lifeofzjs.com/blog/2014/02/16/csapp-cache-lab/#comments">Comments</a>
         
      </p>
    
  </header>


<div class="entry-content"><p>这个实验分为PART A和PART B。PART A要求我们写一个cache模拟器，PART B要求我们利用cache来优化一个矩阵的转置以达到cache miss最少。</p>

<p>目前只完成了A部分，B部分等把CSAPP的其它实验全部做完了有空的话再回来做，剩下的几个lab也都很有意思。</p>

<p>这个simulator完全要自己写，没有给函数接口和数据结构，这些要自己设计。最终的binary接受4个参数：</p>

<!-- more -->




<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-b  // b bits来表示block大小
</span><span class="line">-E  // 一个set里有E项，即E-way associativity
</span><span class="line">-s  // s bits来表示set大小
</span><span class="line">-t  / /测试文件</span></code></pre></td></tr></tbody></table></div></figure>


<p>在测试文件里有4种类型的命令：</p>

<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">I 0400d7d4,8    // Instruction load
</span><span class="line">M 0421c7f0,4    // Modify, i.e, a data load followed by a data store
</span><span class="line">L 04f6b868,8    // a data load 
</span><span class="line">S 7ff0005c8,8   // a data store</span></code></pre></td></tr></tbody></table></div></figure>


<p>然后根据命令行指定参数的cache来模拟运行这些指令，给出最终的hit数，miss数和eviction数。替换策略为LRU。</p>

<h2>data structure</h2>

<p>总的来说，无非就是一个2<sup>s</sup>行，E列的数组，数组的元素是一个struct，由<code>is_valide</code>，<code>tag</code>和<code>access_time</code>。下面是我定义的数据结构：</p>

<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct oneSet
</span><span class="line">{
</span><span class="line">    int *v;
</span><span class="line">    clock_t *last_access_time;
</span><span class="line">    long *tag;    
</span><span class="line">};
</span><span class="line">
</span><span class="line">// the global pointer to the cache, setptr[n] stands for the nth set entry
</span><span class="line">struct oneSet *setptr;</span></code></pre></td></tr></tbody></table></div></figure>


<p>其中oneSet这个struct中的指针都需要根据参数动态分配，所有数组的大小为E。</p>

<h2>Load operation</h2>

<p>如果当前指令是load，那么处理的伪代码伪：</p>

<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if cache hit:
</span><span class="line">    hit++
</span><span class="line">else:   //cache miss:
</span><span class="line">    if cache is not full:
</span><span class="line">        miss++
</span><span class="line">    else:   // cache is full
</span><span class="line">        miss++
</span><span class="line">        evict++</span></code></pre></td></tr></tbody></table></div></figure>


<h2>Store operation</h2>

<p>如果当前指令是store，那么处理的伪代码伪：</p>

<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if cache hit:
</span><span class="line">    hit++
</span><span class="line">else:   //cache miss
</span><span class="line">    do a load operation</span></code></pre></td></tr></tbody></table></div></figure>


<h2>Modify operation</h2>

<p>如果当前指令是Modify，那么处理的伪代码伪：</p>

<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">do a load operation
</span><span class="line">do a store operation</span></code></pre></td></tr></tbody></table></div></figure>


<p>如果把上面的逻辑想通了，那么就可以编码了。</p>

<h2>函数设计</h2>

<p>以下是我所有函数的原型：</p>

<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// to get the opt from the command line
</span><span class="line">void get_opt();
</span><span class="line">
</span><span class="line">// do init work, i.e, malloc space
</span><span class="line">void do_init();
</span><span class="line">
</span><span class="line">// do deinit work, i.e, free space
</span><span class="line">void do_deinit();
</span><span class="line">
</span><span class="line">// do a load operation
</span><span class="line">void do_L(void *addr, int size);
</span><span class="line">
</span><span class="line">// do a modify operation
</span><span class="line">void do_M(void *addr, int size);
</span><span class="line">
</span><span class="line">// do a store operation
</span><span class="line">void do_S(void *addr, int size);
</span><span class="line">
</span><span class="line">// get set number according to the address of data
</span><span class="line">int  getset(void *addr);
</span><span class="line">
</span><span class="line">// get tag number according to the address of data
</span><span class="line">long gettag(void *addr);</span></code></pre></td></tr></tbody></table></div></figure>


<h2>遇到的些问题</h2>

<ol>
<li><p>替换策略为LRU，所以要记录每个block的最后访问时间，我本来是调用clock()来获取当前cpu时间作为当前时间的，运行后程序出问题，调试发现这个值一直为0。后来查到了原因，是程序运行时间太短cpu时间太小导致精度不够…表示i7四代太强了。后来用一个long来表示时间解决这个问题。</p></li>
<li><p>虚拟机不能用mmap。本来一个更方便读测试文件的方法是用mmap把它映射到内存然后直接内存操作，但我的host是mac，在parallel desktop上跑ubuntu，导致了mmap不能正常使用，详细见<a href="http://stackoverflow.com/questions/18420473/invalid-argument-for-read-write-mmap">这里</a></p></li>
</ol>


<h2>源码</h2>

<p>以下是我整个simulator的代码，通过了所有测试：</p>

<figure class="code"> <div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
<span class="line-number">177</span>
<span class="line-number">178</span>
<span class="line-number">179</span>
<span class="line-number">180</span>
<span class="line-number">181</span>
<span class="line-number">182</span>
<span class="line-number">183</span>
<span class="line-number">184</span>
<span class="line-number">185</span>
<span class="line-number">186</span>
<span class="line-number">187</span>
<span class="line-number">188</span>
<span class="line-number">189</span>
<span class="line-number">190</span>
<span class="line-number">191</span>
<span class="line-number">192</span>
<span class="line-number">193</span>
<span class="line-number">194</span>
<span class="line-number">195</span>
<span class="line-number">196</span>
<span class="line-number">197</span>
<span class="line-number">198</span>
<span class="line-number">199</span>
<span class="line-number">200</span>
<span class="line-number">201</span>
<span class="line-number">202</span>
<span class="line-number">203</span>
<span class="line-number">204</span>
<span class="line-number">205</span>
<span class="line-number">206</span>
<span class="line-number">207</span>
<span class="line-number">208</span>
<span class="line-number">209</span>
<span class="line-number">210</span>
<span class="line-number">211</span>
<span class="line-number">212</span>
<span class="line-number">213</span>
<span class="line-number">214</span>
<span class="line-number">215</span>
<span class="line-number">216</span>
<span class="line-number">217</span>
<span class="line-number">218</span>
<span class="line-number">219</span>
<span class="line-number">220</span>
<span class="line-number">221</span>
<span class="line-number">222</span>
<span class="line-number">223</span>
<span class="line-number">224</span>
<span class="line-number">225</span>
<span class="line-number">226</span>
<span class="line-number">227</span>
<span class="line-number">228</span>
<span class="line-number">229</span>
<span class="line-number">230</span>
<span class="line-number">231</span>
<span class="line-number">232</span>
<span class="line-number">233</span>
<span class="line-number">234</span>
<span class="line-number">235</span>
<span class="line-number">236</span>
<span class="line-number">237</span>
<span class="line-number">238</span>
<span class="line-number">239</span>
<span class="line-number">240</span>
<span class="line-number">241</span>
<span class="line-number">242</span>
<span class="line-number">243</span>
<span class="line-number">244</span>
<span class="line-number">245</span>
<span class="line-number">246</span>
<span class="line-number">247</span>
<span class="line-number">248</span>
<span class="line-number">249</span>
<span class="line-number">250</span>
<span class="line-number">251</span>
<span class="line-number">252</span>
<span class="line-number">253</span>
<span class="line-number">254</span>
<span class="line-number">255</span>
<span class="line-number">256</span>
<span class="line-number">257</span>
<span class="line-number">258</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> * author : zjs</span>
</span><span class="line"><span class="cm"> * date : 2014.02.15</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="cp">#include "cachelab.h"</span>
</span><span class="line"><span class="cp">#include &lt;time.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;getopt.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;ctype.h&gt;</span>
</span><span class="line"><span class="cp">#define MAXLINE 200</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">get_opt</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">);</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">do_init</span><span class="p">();</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">do_deinit</span><span class="p">();</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">do_L</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">);</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">do_M</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">);</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">do_S</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">);</span>
</span><span class="line"><span class="kt">int</span>  <span class="nf">getset</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">);</span>
</span><span class="line"><span class="kt">long</span> <span class="nf">gettag</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// data structure of one specific set entry</span>
</span><span class="line"><span class="c1">// the size of array is the number of lines from command line, i.e. -E 1</span>
</span><span class="line"><span class="k">struct</span> <span class="n">oneSet</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="o">*</span><span class="n">v</span><span class="p">;</span>
</span><span class="line">    <span class="n">clock_t</span> <span class="o">*</span><span class="n">last_access_time</span><span class="p">;</span>
</span><span class="line">    <span class="kt">long</span> <span class="o">*</span><span class="n">tag</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">hits</span><span class="p">,</span> <span class="n">misses</span><span class="p">,</span> <span class="n">evicts</span><span class="p">;</span>
</span><span class="line"><span class="k">struct</span> <span class="n">oneSet</span> <span class="o">*</span><span class="n">setptr</span><span class="p">;</span>          <span class="c1">// the global pointer to the cache, setptr[n] stands for the nth set entry</span>
</span><span class="line"><span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">E</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="kt">char</span> <span class="o">*</span><span class="n">file</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line"><span class="kt">long</span> <span class="n">clocktime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>             <span class="c1">// used to record the access time</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">get_opt</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class="line">    <span class="n">do_init</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s">"r"</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">fp</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"open file error</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
</span><span class="line">        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">char</span> <span class="n">op</span><span class="p">[</span><span class="n">MAXLINE</span><span class="p">];</span>
</span><span class="line">    <span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span><span class="line">    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="n">MAXLINE</span><span class="p">];</span>
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="n">fgets</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">MAXLINE</span><span class="p">,</span> <span class="n">fp</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="c1">//printf("\nline read: %s\n", buf);</span>
</span><span class="line">        <span class="n">sscanf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">"%s %p,%d"</span><span class="p">,</span> <span class="n">op</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">addr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">);</span>
</span><span class="line">        <span class="c1">//printf("op = %s, addr = %p, size = %d\n", op, addr, size);</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">op</span> <span class="o">==</span> <span class="sc">'L'</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">do_L</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">op</span> <span class="o">==</span> <span class="sc">'M'</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">do_M</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">op</span> <span class="o">==</span> <span class="sc">'S'</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">do_S</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">do_deinit</span><span class="p">();</span>
</span><span class="line">    <span class="n">printSummary</span><span class="p">(</span><span class="n">hits</span><span class="p">,</span> <span class="n">misses</span><span class="p">,</span> <span class="n">evicts</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// get the program parameter using getopt library</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">get_opt</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">while</span> <span class="p">((</span><span class="n">c</span> <span class="o">=</span> <span class="n">getopt</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="s">"s:E:b:t:"</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">switch</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="k">case</span> <span class="sc">'s'</span><span class="o">:</span>
</span><span class="line">                <span class="n">s</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">optarg</span><span class="p">);</span>
</span><span class="line">                <span class="k">break</span><span class="p">;</span>
</span><span class="line">            <span class="k">case</span> <span class="sc">'E'</span><span class="o">:</span>
</span><span class="line">                <span class="n">E</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">optarg</span><span class="p">);</span>
</span><span class="line">                <span class="k">break</span><span class="p">;</span>
</span><span class="line">            <span class="k">case</span> <span class="sc">'b'</span><span class="o">:</span>
</span><span class="line">                <span class="n">b</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">optarg</span><span class="p">);</span>
</span><span class="line">                <span class="k">break</span><span class="p">;</span>
</span><span class="line">            <span class="k">case</span> <span class="sc">'t'</span><span class="o">:</span>
</span><span class="line">                <span class="n">file</span> <span class="o">=</span> <span class="n">optarg</span><span class="p">;</span>
</span><span class="line">                <span class="k">break</span><span class="p">;</span>
</span><span class="line">            <span class="k">default</span><span class="o">:</span>
</span><span class="line">                <span class="n">printf</span><span class="p">(</span><span class="s">"illegal opt</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
</span><span class="line">                <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// using malloc to initialize data structure</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">do_init</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">S</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">s</span><span class="p">);</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span> <span class="n">S</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"S is nonpositive</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
</span><span class="line">        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">setptr</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">oneSet</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">oneSet</span><span class="p">)</span> <span class="o">*</span> <span class="n">S</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">ind</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">ind</span> <span class="o">&lt;</span> <span class="n">S</span><span class="p">;</span> <span class="o">++</span><span class="n">ind</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">setptr</span><span class="p">[</span><span class="n">ind</span><span class="p">].</span><span class="n">v</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="n">E</span><span class="p">);</span>
</span><span class="line">        <span class="n">setptr</span><span class="p">[</span><span class="n">ind</span><span class="p">].</span><span class="n">last_access_time</span> <span class="o">=</span> <span class="p">(</span><span class="n">clock_t</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">clock_t</span><span class="p">)</span> <span class="o">*</span> <span class="n">E</span><span class="p">);</span>
</span><span class="line">        <span class="n">setptr</span><span class="p">[</span><span class="n">ind</span><span class="p">].</span><span class="n">tag</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">)</span> <span class="o">*</span> <span class="n">E</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">Eind</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="n">Eind</span> <span class="o">&lt;</span> <span class="n">E</span><span class="p">;</span> <span class="n">Eind</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">setptr</span><span class="p">[</span><span class="n">ind</span><span class="p">].</span><span class="n">v</span><span class="p">[</span><span class="n">Eind</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">            <span class="n">setptr</span><span class="p">[</span><span class="n">ind</span><span class="p">].</span><span class="n">last_access_time</span><span class="p">[</span><span class="n">Eind</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">            <span class="n">setptr</span><span class="p">[</span><span class="n">ind</span><span class="p">].</span><span class="n">tag</span><span class="p">[</span><span class="n">Eind</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// explicitly return the space back to heap</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">do_deinit</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">S</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">s</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">setptr</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">oneSet</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">oneSet</span><span class="p">)</span> <span class="o">*</span> <span class="n">S</span><span class="p">);</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">ind</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">ind</span> <span class="o">&lt;</span> <span class="n">S</span><span class="p">;</span> <span class="o">++</span><span class="n">ind</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">free</span><span class="p">(</span><span class="n">setptr</span><span class="p">[</span><span class="n">ind</span><span class="p">].</span><span class="n">v</span><span class="p">);</span>
</span><span class="line">        <span class="n">free</span><span class="p">(</span><span class="n">setptr</span><span class="p">[</span><span class="n">ind</span><span class="p">].</span><span class="n">last_access_time</span><span class="p">);</span>
</span><span class="line">        <span class="n">free</span><span class="p">(</span><span class="n">setptr</span><span class="p">[</span><span class="n">ind</span><span class="p">].</span><span class="n">tag</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">free</span><span class="p">(</span><span class="n">setptr</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// do a LOAD operation</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">do_L</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">setnum</span> <span class="o">=</span> <span class="n">getset</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">"setnum = %d, "</span><span class="p">,</span> <span class="n">setnum</span><span class="p">);</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">oneSet</span> <span class="o">*</span><span class="n">this_set</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">setptr</span><span class="p">[</span><span class="n">setnum</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">index</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">full</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">empty_item</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>         <span class="c1">// if not full, keep track of the empty item</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">last_item</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>          <span class="c1">// if full, keep track of the evict item</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">last_time</span> <span class="o">=</span> <span class="n">this_set</span><span class="o">-&gt;</span><span class="n">last_access_time</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">E</span><span class="p">;</span> <span class="n">index</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="c1">// find, update the access time</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">this_set</span><span class="o">-&gt;</span><span class="n">v</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">gettag</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span> <span class="o">==</span> <span class="n">this_set</span><span class="o">-&gt;</span><span class="n">tag</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">this_set</span><span class="o">-&gt;</span><span class="n">last_access_time</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="o">++</span><span class="n">clocktime</span><span class="p">;</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="c1">// not valid, then this entry is considered empty which means cache is not full</span>
</span><span class="line">        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">this_set</span><span class="o">-&gt;</span><span class="n">v</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">full</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">            <span class="n">empty_item</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="c1">// valid but tag not equal</span>
</span><span class="line">        <span class="k">else</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="c1">// keep track of the LRU item, ready for eviction</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="n">this_set</span><span class="o">-&gt;</span><span class="n">last_access_time</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">last_time</span><span class="p">)</span>
</span><span class="line">            <span class="p">{</span>
</span><span class="line">                <span class="n">last_item</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span>
</span><span class="line">                <span class="n">last_time</span> <span class="o">=</span> <span class="n">this_set</span><span class="o">-&gt;</span><span class="n">last_access_time</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="o">==</span> <span class="n">E</span><span class="p">)</span> <span class="c1">// miss</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">misses</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">full</span><span class="p">)</span>   <span class="c1">//evict</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">this_set</span><span class="o">-&gt;</span><span class="n">tag</span><span class="p">[</span><span class="n">last_item</span><span class="p">]</span> <span class="o">=</span> <span class="n">gettag</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
</span><span class="line">            <span class="n">this_set</span><span class="o">-&gt;</span><span class="n">last_access_time</span><span class="p">[</span><span class="n">last_item</span><span class="p">]</span> <span class="o">=</span> <span class="o">++</span><span class="n">clocktime</span><span class="p">;</span>
</span><span class="line">            <span class="n">evicts</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">else</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">this_set</span><span class="o">-&gt;</span><span class="n">v</span><span class="p">[</span><span class="n">empty_item</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">            <span class="n">this_set</span><span class="o">-&gt;</span><span class="n">tag</span><span class="p">[</span><span class="n">empty_item</span><span class="p">]</span> <span class="o">=</span> <span class="n">gettag</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
</span><span class="line">            <span class="n">this_set</span><span class="o">-&gt;</span><span class="n">last_access_time</span><span class="p">[</span><span class="n">empty_item</span><span class="p">]</span> <span class="o">=</span> <span class="o">++</span><span class="n">clocktime</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span>    <span class="c1">// hit</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">hits</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">//the difference between S and M is that S only load when miss, while M always load first then store</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">do_S</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">setnum</span> <span class="o">=</span> <span class="n">getset</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">"setnum = %d, "</span><span class="p">,</span> <span class="n">setnum</span><span class="p">);</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">oneSet</span> <span class="o">*</span><span class="n">this_set</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">setptr</span><span class="p">[</span><span class="n">setnum</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">index</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">E</span><span class="p">;</span> <span class="o">++</span><span class="n">index</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">this_set</span><span class="o">-&gt;</span><span class="n">v</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">gettag</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span> <span class="o">==</span> <span class="n">this_set</span><span class="o">-&gt;</span><span class="n">tag</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>    <span class="c1">//find</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="n">this_set</span><span class="o">-&gt;</span><span class="n">last_access_time</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="o">++</span><span class="n">clocktime</span><span class="p">;</span>
</span><span class="line">            <span class="k">break</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="o">==</span> <span class="n">E</span><span class="p">)</span> <span class="c1">// store miss</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">do_L</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>   <span class="c1">// if miss, then load</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span>            <span class="c1">// store hit</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">hits</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// do a MODIFY operation, which do S afer L</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">do_M</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">setnum</span> <span class="o">=</span> <span class="n">getset</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">"setnum = %d, "</span><span class="p">,</span> <span class="n">setnum</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">do_L</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class="line">    <span class="n">do_S</span><span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// get the set number from the address</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">getset</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span> <span class="p">((</span><span class="kt">long</span><span class="p">)</span><span class="n">addr</span> <span class="o">&gt;&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">((</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">s</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// get the tag number from the address</span>
</span><span class="line"><span class="kt">long</span> <span class="nf">gettag</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="kt">long</span><span class="p">)((</span><span class="kt">long</span><span class="p">)</span><span class="n">addr</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="n">b</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></tbody></table></div></figure>



</div>


  <footer>
    <p class="meta">
      
  

<span class="byline author vcard">Posted by <span class="fn">zyearn</span></span>

      








  


<time datetime="2014-02-16T11:52:00+08:00" pubdate="" data-updated="true">Feb 16<span>th</span>, 2014</time>
      

<span class="categories">
  
    <a class="category" href="http://lifeofzjs.com/blog/categories/computersystem/">ComputerSystem</a>
  
</span>


    </p>
    
      <div class="sharing">
  
  
  
  
  
</div>

    
    <p class="meta">
      
        <a class="basic-alignment left" href="http://lifeofzjs.com/blog/2014/02/07/csapp-buf-lab/" title="Previous Post: CSAPP: Buf Lab">« CSAPP: Buf Lab</a>
      
      
        <a class="basic-alignment right" href="http://lifeofzjs.com/blog/2014/02/18/csapp-shell-lab/" title="Next Post: CSAPP: Shell Lab">CSAPP: Shell Lab »</a>
      
    </p>
  </footer>
</article>


  <section>
  <!-- <h1>Comments</h1> -->
    <div id="comments" aria-live="polite"><!-- Duoshuo Comment BEGIN -->
<div class="ds-thread" data-title="CSAPP: Cache Lab - zyearn&#39;s blog" id="ds-thread"><div id="ds-reset"><div class="ds-comments-info"><div class="ds-sort"><a class="ds-order-desc">最新</a><a class="ds-order-asc ds-current">最早</a><a class="ds-order-hot">最热</a></div><ul class="ds-comments-tabs"><li class="ds-tab"><a class="ds-comments-tab-duoshuo ds-current" href="javascript:void(0);"><span class="ds-highlight">1</span>条评论</a></li></ul></div><ul class="ds-comments"><li class="ds-post" data-post-id="1316548626029215761"><div class="ds-post-self" data-post-id="1316548626029215761" data-thread-id="1316548626029215761" data-root-id="0" data-source="duoshuo"><div class="ds-avatar"><img src="./CSAPP  Cache Lab - zyearn's blog_files/3b62f80b2115b63cc987021a817dbd2f" alt="edfward"></div><div class="ds-comment-body"><div class="ds-comment-header"><span class="ds-user-name" data-qqt-account="">edfward</span></div><p>124 行过~<br>
simulate 的过程中S和L没有区别吧，M 也就是1L+1S. 所以我是统一用 update_cache 作为接口，M 只不过调用了两次，并且函数里可以直接用一个 static unsigned 作 clock.</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2014-06-24T13:22:29+08:00" title="2014年6月24日 下午1:22:29">6月24日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li></ul><div class="ds-paginator" style="display: none;"><div class="ds-border"></div><a data-page="1" href="javascript:void(0);" class="ds-current">1</a></div><a name="respond"></a><div class="ds-login-buttons"><p>社交帐号登录:</p><div class="ds-social-links"><ul class="ds-service-list"><li><a href="http://zyearn.duoshuo.com/login/weibo/" rel="nofollow" class="ds-service-link ds-weibo">微博</a></li><li><a href="http://zyearn.duoshuo.com/login/qq/" rel="nofollow" class="ds-service-link ds-qq">QQ</a></li><li><a href="http://zyearn.duoshuo.com/login/renren/" rel="nofollow" class="ds-service-link ds-renren">人人</a></li><li><a href="http://zyearn.duoshuo.com/login/douban/" rel="nofollow" class="ds-service-link ds-douban">豆瓣</a></li><li><a class="ds-more-services" href="javascript:void(0)">更多»</a></li></ul><ul class="ds-service-list ds-additional-services"><li><a href="http://zyearn.duoshuo.com/login/kaixin/" rel="nofollow" class="ds-service-link ds-kaixin">开心</a></li><li><a href="http://zyearn.duoshuo.com/login/netease/" rel="nofollow" class="ds-service-link ds-netease">网易</a></li><li><a href="http://zyearn.duoshuo.com/login/sohu/" rel="nofollow" class="ds-service-link ds-sohu">搜狐</a></li><li><a href="http://zyearn.duoshuo.com/login/baidu/" rel="nofollow" class="ds-service-link ds-baidu">百度</a></li><li><a href="http://zyearn.duoshuo.com/login/google/" rel="nofollow" class="ds-service-link ds-google">谷歌</a></li></ul></div></div><div class="ds-replybox"><a class="ds-avatar" href="javascript:void(0);" onclick="return false"><img src="./CSAPP  Cache Lab - zyearn's blog_files/noavatar_default.png" alt=""></a><form method="post"><input type="hidden" name="thread_id" value="1316548626029215761">
<input type="hidden" name="parent_id" value="">
<input type="hidden" name="nonce" value="5450e408b4cbf"><div class="ds-textarea-wrapper ds-rounded-top"><textarea name="message" title="Ctrl+Enter快捷提交" placeholder="说点什么吧…"></textarea><pre class="ds-hidden-text"></pre></div><div class="ds-post-toolbar"><div class="ds-post-options ds-gradient-bg"><span class="ds-sync"></span></div><button class="ds-post-button" type="submit">发布</button><div class="ds-toolbar-buttons"><a class="ds-toolbar-button ds-add-emote" title="插入表情"></a></div></div></form></div><p class="ds-powered-by"><a href="http://duoshuo.com/" target="_blank" rel="nofollow">zjs正在使用多说</a></p></div></div>
        <script type="text/javascript">
        var duoshuoQuery = {short_name:"zyearn"};
        (function() {
            var ds = document.createElement('script');
            ds.type = 'text/javascript';ds.async = true;
            ds.src = 'http://static.duoshuo.com/embed.js';
            ds.charset = 'UTF-8';
            (document.getElementsByTagName('head')[0] 
             || document.getElementsByTagName('body')[0]).appendChild(ds);
            })();
        </script>

        <!-- Duoshuo Comment END -->
</div>
  </section>


</div>


<aside class="sidebar">
  
    <section>
    <div align="center">
    <img src="./CSAPP  Cache Lab - zyearn's blog_files/photo.jpg" width="120px">
    </div>
    <div style="margin-top:10px">
        <h2>Hi, I am zyearn.</h2>
        <p>Graduate student of Shanghai JiaoTong University.</p>
        <p>Mainly use C/C++ for my own projects, trying to master javascript.</p>
    </div>

</section>
<section>
  <h1>Categories</h1>
    <ul id="category-list"><li><a href="http://lifeofzjs.com/blog/categories/algorithms">Algorithms (1)</a></li><li><a href="http://lifeofzjs.com/blog/categories/computersystem">ComputerSystem (6)</a></li><li><a href="http://lifeofzjs.com/blog/categories/program">Program (8)</a></li><li><a href="http://lifeofzjs.com/blog/categories/reading">Reading (3)</a></li><li><a href="http://lifeofzjs.com/blog/categories/thoughts">Thoughts (7)</a></li></ul>
</section>
<section>
<h1>我的小伙伴</h1>
<ul>
	<li>
	<a href="http://zhoutall.com/" target="_blank">zhoutall</a>
	</li>
	<li>
	<a href="http://blog.edfward.com/" target="_blank">edfward</a>
	</li>
	<li>
	<a href="http://www.quarkjoker.com/" target="_blank">慎牛</a>
	</li>
</ul>
</section>

  
</aside>


    </div>
  </div>
  <footer role="contentinfo"><p>
  Copyright © 2014 - zyearn -
  <script type="text/javascript">var cnzz_protocol = (("https:" == document.location.protocol) ? " https://" : " http://");document.write(unescape("%3Cspan id='cnzz_stat_icon_5730991' style=display:none%3E%3C/span%3E%3Cscript src='" + cnzz_protocol + "s6.cnzz.com/stat.php%3Fid%3D5730991' type='text/javascript'%3E%3C/script%3E"));</script><span id="cnzz_stat_icon_5730991" style="display:none"><a href="http://www.cnzz.com/stat/website.php?web_id=5730991" target="_blank" title="站长统计">站长统计</a></span><script src="./CSAPP  Cache Lab - zyearn's blog_files/stat.php" type="text/javascript"></script><script src="./CSAPP  Cache Lab - zyearn's blog_files/core.php" charset="utf-8" type="text/javascript"></script>
  
</p>

</footer>
  
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
  <script>!window.jQuery && document.write(unescape('%3Cscript src="./javascripts/libs/jquery.min.js"%3E%3C/script%3E'))</script><script src="./CSAPP  Cache Lab - zyearn's blog_files/jquery.min.js"></script>
  <script src="./CSAPP  Cache Lab - zyearn's blog_files/modernizr-2.0.js"></script>
  <script src="./CSAPP  Cache Lab - zyearn's blog_files/octopress.js" type="text/javascript"></script>




</body></html>